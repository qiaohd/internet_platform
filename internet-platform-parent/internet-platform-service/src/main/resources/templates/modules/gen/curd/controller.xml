<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestBody;
import org.apache.shiro.SecurityUtils;
import com.ufgov.ip.entity.system.IpHirer;
import com.ufgov.ip.api.system.UserAccountServiceI;
import com.ufgov.ip.api.system.HirerAccountServiceI;
import com.ufgov.ip.entity.system.IpUser;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import com.ufgov.ip.serviceutils.PropertyUtilSys;

import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}ServiceI;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${urlPrefix}")
public class ${ClassName}Controller{

	@Autowired
	private ${ClassName}ServiceI ${className}Service;
	
	@Autowired
	protected UserAccountServiceI userAccountService;
    
    @Autowired
	protected HirerAccountServiceI hirerAccountService;
	
	
	@RequestMapping(method = RequestMethod.POST,value = "list")
	public @ResponseBody List<${ClassName}> list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<${ClassName}> page = ${className}Service.findList(${className}); 
		return page;
	}


	@RequestMapping(method = RequestMethod.POST,value = "save")
	public @ResponseBody Map<String,Object> save(${ClassName} ${className}, Model model,HttpServletRequest request, HttpServletResponse response) {
	   Map<String,Object> reg=new HashMap<String,Object>();
	   try{
	   
	       <#if schemeType=='3' || schemeType=='0'>
		         String getbpmEnabledByKey = PropertyUtilSys.getbpmEnabledByKey("bpm.enabled");
				 if("false".equals(getbpmEnabledByKey)){//工作流已经关闭
					 reg.put("result", "disable");
					 return reg;
				 }
				 
				 String cuser = (String) SecurityUtils.getSubject().getPrincipal();
				IpHirer ipHirer = hirerAccountService.findHirerByEmailOrLoginNameOrCellphoneNo(cuser);//租户
				if(ipHirer!=null){
			    	reg.put("result", "hirerLogin");
			    	reg.put("reason", "租户管理员不能提交表单并开启工作流");
			    	return reg;
				}else{
					 IpUser ipUser=userAccountService.findUserByUserEmailOrLoginNameOrCellphoneNo(cuser); //普通用户
					   if(ipUser!=null){
						   ${className}Service.saveAndStartBpm(${className},ipUser.getUserId());
					   }
				}
		   <#else>
		   	  ${className}Service.save(${className});
	       </#if>
			reg.put("result", "true");
			reg.put("reason", "保存成功");
			return reg;
	   
	   }catch(Exception e){
			e.printStackTrace();
			reg.put("result", "false");
			reg.put("reason", "保存失败");
			return reg;
		}
	    
	}
	
	@RequestMapping(method = RequestMethod.POST,value = "update")
	public @ResponseBody Map<String,Object> update(${ClassName} ${className}, Model model,HttpServletRequest request, HttpServletResponse response) {
	   Map<String,Object> reg=new HashMap<String,Object>();
	   try{
			${className}Service.update(${className});
			reg.put("result", "true");
			reg.put("reason", "更新成功");
			return reg;
	   }catch(Exception e){
			e.printStackTrace();
			reg.put("result", "false");
			reg.put("reason", "更新失败");
			return reg;
		}
	    
	}
	
	@RequestMapping(method = RequestMethod.POST,value = "delete")
	public @ResponseBody Map<String,Object> delete(@RequestBody ${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response) {
		Map<String,Object> reg=new HashMap<String,Object>();
			try{
		         ${className}Service.delete(${className});
			     reg.put("result", "true");
			     reg.put("reason", "删除成功");
			     return reg;
			}catch(Exception e){
			    e.printStackTrace();
				reg.put("result", "false");
				reg.put("reason", "删除失败");
				return reg;
			}
	}

}]]>
	</content>
</template>